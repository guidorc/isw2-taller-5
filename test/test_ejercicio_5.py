#!./venv/bin/python
import unittest
from random import seed
from magic_fuzzer import MagicFuzzer
from my_parser import my_parser


class TestEjercicio5(unittest.TestCase):

    def test_fuzzing_campaign_1(self):
        seed(122)
        fuzzer = MagicFuzzer([" "], my_parser)
        lines_covered, iterations = fuzzer.run_iterations(5000)
        self.assertEqual(
            {5, 6, 37, 38, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 77, 78, 79, 80, 81, 84, 89, 90, 91, 92, 93, 94, 95,
             96, 97, 98, 99, 100, 101, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 127, 128, 130, 131, 132,
             134, 135, 136, 137, 138, 139, 140, 145, 146, 147, 148, 149, 150, 151, 160, 161, 162, 165, 166, 167, 168,
             169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 184, 185, 186, 190, 194, 198, 202, 203,
             204, 221, 222, 226, 227, 228, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248,
             249, 250, 251, 252, 254, 256, 257, 258, 259, 262, 263, 264, 267, 268, 269, 270, 272, 273, 274, 277, 278,
             279, 280, 281, 282, 283, 284, 285, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301,
             302, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 324, 326, 327, 329,
             330, 332, 340, 342, 344, 345, 347, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 367, 368,
             370, 371, 372, 374, 375, 376, 378, 379, 380, 381, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394,
             398, 399, 401, 402, 404, 410, 414, 415, 420, 421, 422, 426, 427, 431, 434, 435, 439, 440, 441, 442, 444,
             445, 446, 447, 449, 450, 451, 459, 478, 479, 487, 488, 489, 490, 491, 492, 496, 499, 500, 501, 502, 503,
             507, 508, 509, 510, 511, 512, 514, 518, 520, 521, 522, 525, 528, 529, 532, 533, 535, 536, 539, 545, 546,
             547, 548, 549, 552, 553, 554, 555, 557, 564, 565, 567, 568, 569, 571, 572, 573, 574, 576, 578, 579, 585,
             586, 587, 589, 590, 594, 595, 596, 598, 599, 602, 603, 604, 605, 606, 608, 613, 614, 615, 616, 617, 619,
             620, 624, 625, 628, 631, 633, 635, 674, 679, 680, 786, 787, 788, 792, 794, 799, 800, 801, 804, 805, 806,
             807, 859, 860, 861, 866, 930, 931, 933, 934, 942, 947, 949, 950, 951, 952, 954, 955, 965, 967, 971, 976,
             978, 979, 980}, lines_covered)

    def test_fuzzing_campaign_2(self):
        seed(912)
        fuzzer = MagicFuzzer([" "], my_parser)
        lines_covered, iterations = fuzzer.run_iterations(5000)
        self.assertEqual(
            {5, 6, 33, 34, 37, 38, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 77, 78, 79, 80, 81, 84, 89, 90, 91, 92, 93,
             94, 95, 96, 97, 98, 99, 100, 101, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 130, 131, 132,
             134, 135, 136, 137, 138, 139, 140, 145, 146, 147, 148, 149, 150, 151, 152, 155, 159, 160, 161, 162, 165,
             166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 184, 185, 186, 190, 194,
             198, 202, 203, 204, 221, 222, 226, 227, 228, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242,
             243, 244, 248, 249, 250, 251, 252, 254, 256, 257, 258, 259, 262, 263, 264, 267, 268, 269, 270, 272, 273,
             274, 277, 278, 279, 280, 281, 282, 283, 284, 285, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298,
             299, 300, 301, 302, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 315, 316, 317, 329, 330, 332, 340,
             344, 345, 347, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 367, 368, 370, 371, 372, 374,
             375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 410, 431, 434, 439,
             440, 441, 442, 444, 445, 446, 447, 449, 450, 451, 478, 479, 487, 488, 489, 490, 491, 492, 496, 499, 500,
             501, 502, 503, 507, 508, 509, 510, 511, 512, 514, 518, 520, 521, 522, 525, 528, 529, 532, 533, 535, 536,
             539, 545, 546, 547, 548, 549, 552, 553, 554, 555, 557, 564, 565, 567, 568, 569, 571, 572, 573, 574, 576,
             578, 579, 585, 586, 587, 589, 590, 594, 595, 596, 598, 599, 602, 603, 604, 605, 606, 608, 613, 614, 615,
             616, 617, 619, 620, 624, 625, 628, 631, 633, 635, 674, 679, 680, 786, 787, 788, 792, 794, 799, 800, 801,
             804, 805, 806, 807, 859, 860, 861, 866, 930, 931, 933, 934, 942, 947, 949, 950, 951, 952, 954, 955, 965,
             967, 971, 976, 978, 979, 980}, lines_covered)

    def test_fuzzing_campaign_3(self):
        seed(1978)
        fuzzer = MagicFuzzer([" "], my_parser)
        lines_covered, iterations = fuzzer.run_iterations(5000)
        self.assertEqual(
            {5, 6, 33, 34, 37, 38, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 77, 78, 79, 80, 81, 84, 89, 90, 91, 92, 93,
             94, 95, 96, 97, 98, 99, 100, 101, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 127, 128,
             130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 145, 146, 147, 148, 149, 150, 151, 152, 155, 159, 160,
             161, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 184, 185,
             186, 190, 194, 198, 202, 203, 204, 221, 222, 226, 227, 228, 230, 231, 232, 233, 235, 236, 237, 238, 239,
             240, 241, 242, 243, 244, 248, 249, 250, 251, 252, 254, 256, 257, 258, 259, 262, 263, 264, 267, 268, 269,
             270, 272, 273, 274, 277, 278, 279, 280, 281, 282, 283, 284, 285, 288, 289, 290, 291, 292, 293, 294, 295,
             296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318,
             319, 320, 324, 326, 327, 329, 330, 332, 340, 342, 344, 345, 347, 352, 353, 354, 355, 356, 357, 358, 359,
             360, 361, 362, 363, 364, 367, 368, 370, 371, 372, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385,
             386, 387, 388, 389, 390, 391, 392, 393, 394, 398, 399, 401, 402, 404, 405, 410, 411, 412, 414, 415, 420,
             421, 422, 426, 427, 431, 434, 435, 439, 440, 441, 442, 444, 445, 446, 447, 449, 450, 451, 459, 478, 479,
             487, 488, 489, 490, 491, 492, 496, 499, 500, 501, 502, 503, 507, 508, 509, 510, 511, 512, 514, 518, 520,
             521, 522, 525, 528, 529, 532, 533, 535, 536, 539, 545, 546, 547, 548, 549, 552, 553, 554, 555, 557, 564,
             565, 567, 568, 569, 571, 572, 573, 574, 576, 578, 579, 585, 586, 587, 589, 590, 594, 595, 596, 598, 599,
             602, 603, 604, 605, 606, 608, 613, 614, 615, 616, 617, 619, 620, 624, 625, 628, 631, 633, 635, 674, 679,
             680, 786, 787, 788, 792, 794, 799, 800, 801, 804, 805, 806, 807, 859, 860, 861, 866, 930, 931, 933, 934,
             942, 947, 949, 950, 951, 952, 954, 955, 965, 967, 971, 976, 978, 979, 980}, lines_covered)

    def test_fuzzing_campaign_4(self):
        seed(1986)
        fuzzer = MagicFuzzer([" "], my_parser)
        lines_covered, iterations = fuzzer.run_iterations(5000)
        self.assertEqual(
            {5, 6, 37, 38, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 77, 78, 79, 80, 81, 84, 89, 90, 91, 92, 93, 94, 95,
             96, 97, 98, 99, 100, 101, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 127, 128, 130, 131,
             132, 134, 135, 136, 137, 138, 139, 140, 145, 146, 147, 148, 149, 150, 151, 160, 161, 162, 165, 166, 167,
             168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 184, 185, 186, 190, 194, 198, 202,
             203, 204, 221, 222, 226, 227, 228, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
             248, 249, 250, 251, 252, 254, 256, 257, 258, 259, 262, 264, 267, 268, 269, 270, 272, 273, 274, 277, 278,
             279, 280, 281, 282, 283, 284, 285, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301,
             302, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 324, 326, 327, 329,
             330, 332, 340, 342, 344, 345, 347, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 367, 368,
             370, 371, 372, 374, 375, 376, 379, 381, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 398, 399,
             401, 402, 404, 405, 410, 411, 412, 414, 415, 420, 421, 422, 426, 427, 431, 434, 435, 439, 440, 441, 442,
             444, 445, 446, 447, 449, 450, 451, 459, 478, 479, 487, 488, 489, 490, 491, 492, 496, 499, 500, 501, 502,
             503, 507, 508, 509, 510, 511, 512, 514, 518, 520, 521, 522, 525, 528, 529, 532, 533, 535, 536, 539, 545,
             546, 547, 548, 549, 552, 553, 554, 555, 557, 564, 565, 567, 568, 569, 571, 572, 573, 574, 576, 578, 579,
             585, 586, 587, 589, 590, 594, 595, 596, 598, 599, 602, 603, 604, 605, 606, 608, 613, 614, 615, 616, 617,
             619, 620, 624, 625, 628, 631, 633, 635, 674, 679, 680, 786, 787, 788, 792, 794, 799, 800, 801, 804, 805,
             806, 807, 859, 860, 861, 866, 930, 931, 933, 934, 942, 947, 949, 950, 951, 952, 954, 955, 965, 967, 971,
             976, 978, 979, 980}, lines_covered)

    def test_fuzzing_campaign_5(self):
        seed(2022)
        fuzzer = MagicFuzzer([" "], my_parser)
        lines_covered, iterations = fuzzer.run_iterations(5000)
        self.assertEqual(
            {5, 6, 37, 38, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 77, 78, 79, 80, 81, 84, 89, 90, 91, 92, 93, 94, 95,
             96, 97, 98, 99, 100, 101, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 127, 128, 130, 131, 132,
             134, 135, 136, 137, 138, 139, 140, 145, 146, 147, 148, 149, 150, 151, 160, 161, 162, 165, 166, 167, 168,
             169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 184, 185, 186, 190, 194, 198, 202, 203,
             204, 221, 222, 226, 227, 228, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248,
             249, 250, 251, 252, 254, 256, 257, 258, 259, 262, 263, 264, 267, 268, 269, 270, 272, 273, 274, 277, 278,
             279, 280, 281, 282, 283, 284, 285, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301,
             302, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 324, 326, 327, 329,
             330, 332, 340, 342, 344, 345, 347, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 367, 368,
             370, 371, 372, 374, 375, 376, 378, 379, 380, 381, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394,
             398, 399, 401, 402, 404, 405, 410, 411, 412, 414, 415, 420, 421, 422, 426, 427, 431, 434, 435, 439, 440,
             441, 442, 444, 445, 446, 447, 449, 450, 451, 459, 478, 479, 487, 488, 489, 490, 491, 492, 496, 499, 500,
             501, 502, 503, 507, 508, 509, 510, 511, 512, 514, 518, 520, 521, 522, 525, 528, 529, 532, 533, 535, 536,
             539, 545, 546, 547, 548, 549, 552, 553, 554, 555, 557, 564, 565, 567, 568, 569, 571, 572, 573, 574, 576,
             578, 579, 585, 586, 587, 589, 590, 594, 595, 596, 598, 599, 602, 603, 604, 605, 606, 608, 613, 614, 615,
             616, 617, 619, 620, 624, 625, 628, 631, 633, 635, 674, 679, 680, 786, 787, 788, 792, 794, 799, 800, 801,
             804, 805, 806, 807, 859, 860, 861, 866, 930, 931, 933, 934, 942, 947, 949, 950, 951, 952, 954, 955, 965,
             967, 971, 976, 978, 979, 980}, lines_covered)
